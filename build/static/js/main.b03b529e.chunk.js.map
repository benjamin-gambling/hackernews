{"version":3,"sources":["utils.tsx","query.tsx","components/Link.tsx","constants.tsx","components/LinkList.tsx","components/CreateLink.tsx","components/Header.tsx","components/Login.tsx","components/Search.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","FEED_QUERY","gql","FEED_SEARCH_QUERY","POST_MUTATION","SIGNUP_MUTATION","LOGIN_MUTATION","VOTE_MUTATION","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","Link","authToken","localStorage","getItem","className","this","props","index","mutation","variables","linkId","link","id","update","store","vote","data","updateStoreAfterVote","voteMutation","onClick","description","href","url","target","rel","votes","length","postedBy","name","createdAt","Component","LinkList","_updateCacheAfterVote","createVote","isNewPage","location","pathname","includes","page","parseInt","match","params","skip","first","orderBy","readQuery","query","feed","links","find","writeQuery","_subscribeToNewLinks","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","Object","assign","count","__typename","_subscribeToNewVotes","_getQueryVariables","take","_getLinksToRender","rankedLinks","slice","sort","l1","l2","_nextPage","nextPage","history","push","console","log","_previousPage","previousPage","loading","error","linksToRender","pageIndex","map","key","CreateLink","state","_updateCacheAfterPost","post","unshift","value","onChange","e","setState","type","placeholder","onCompleted","postMutation","Header","to","removeItem","withRouter","Login","login","email","password","_confirm","a","signup","token","_saveUserData","setItem","Search","filter","_executeSearch","client","result","withApollo","App","exact","path","render","component","Boolean","window","hostname","HOST","PORT","process","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","split","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b03b529e.chunk.js","sourcesContent":["function timeDifference(current: number, previous: number) {\n  const milliSecondsPerMinute = 60 * 1000;\n  const milliSecondsPerHour = milliSecondsPerMinute * 60;\n  const milliSecondsPerDay = milliSecondsPerHour * 24;\n  const milliSecondsPerMonth = milliSecondsPerDay * 30;\n  const milliSecondsPerYear = milliSecondsPerDay * 365;\n\n  const elapsed = current - previous;\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return \"just now\";\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return \"less than 1 min ago\";\n  } else if (elapsed < milliSecondsPerHour) {\n    return Math.round(elapsed / milliSecondsPerMinute) + \" min ago\";\n  } else if (elapsed < milliSecondsPerDay) {\n    return Math.round(elapsed / milliSecondsPerHour) + \" h ago\";\n  } else if (elapsed < milliSecondsPerMonth) {\n    return Math.round(elapsed / milliSecondsPerDay) + \" days ago\";\n  } else if (elapsed < milliSecondsPerYear) {\n    return Math.round(elapsed / milliSecondsPerMonth) + \" mo ago\";\n  } else {\n    return Math.round(elapsed / milliSecondsPerYear) + \" years ago\";\n  }\n}\n\nexport function timeDifferenceForDate(date: number) {\n  const now = new Date().getTime();\n  const updated = new Date(date).getTime();\n  return timeDifference(now, updated);\n}\n","import gql from \"graphql-tag\";\n\n// QUERYS //\nexport const FEED_QUERY = gql`\n  query FeedQuery($take: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n    feed(take: $take, skip: $skip, orderBy: $orderBy) {\n      links {\n        id\n        createdAt\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      count\n    }\n  }\n`;\n\nexport const FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\n// MUTATIONS //\nexport const POST_MUTATION = gql`\n  mutation PostMutation($description: String!, $url: String!) {\n    post(description: $description, url: $url) {\n      id\n      createdAt\n      url\n      description\n    }\n  }\n`;\n\nexport const SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\n    signup(email: $email, password: $password, name: $name) {\n      token\n    }\n  }\n`;\n\nexport const LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nexport const VOTE_MUTATION = gql`\n  mutation VoteMutation($linkId: ID!) {\n    vote(linkId: $linkId) {\n      id\n      link {\n        id\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\n// SUBSCRIPTION //\n\nexport const NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      createdAt\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport { AUTH_TOKEN } from \"../constants\";\nimport { timeDifferenceForDate } from \"../utils\";\nimport { LinkProps } from \"../interfaces\";\nimport { VOTE_MUTATION } from \"../query\";\nimport { Mutation } from \"react-apollo\";\n\nclass Link extends Component<LinkProps> {\n  render() {\n    const authToken = localStorage.getItem(AUTH_TOKEN);\n\n    return (\n      <div className=\"flex mt2 items-start\">\n        <div className=\"flex items-center\">\n          <span className=\"gray\">{this.props.index + 1}.</span>\n          {authToken && (\n            <Mutation\n              mutation={VOTE_MUTATION}\n              variables={{ linkId: this.props.link.id }}\n              update={(store: any, { data: { vote } }: any) => {\n                this.props.updateStoreAfterVote(\n                  store,\n                  vote,\n                  this.props.link.id\n                );\n              }}\n            >\n              {(voteMutation: any) => (\n                <div\n                  id=\"upvote\"\n                  className=\"ml1 gray f11\"\n                  onClick={voteMutation}\n                >\n                  ▲\n                </div>\n              )}\n            </Mutation>\n          )}\n        </div>\n\n        <div className=\"ml1\">\n          <div>\n            {this.props.link.description} (\n            <a\n              href={this.props.link.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {this.props.link.url}\n            </a>\n            )\n          </div>\n\n          <div className=\"f6 lh-copy gray\">\n            {this.props.link.votes.length} votes | by{\" \"}\n            {this.props.link.postedBy\n              ? this.props.link.postedBy.name\n              : \"Unknown\"}{\" \"}\n            {timeDifferenceForDate(this.props.link.createdAt)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Link;\n","export const AUTH_TOKEN = \"auth-token\";\nexport const LINKS_PER_PAGE = 10;\n","import React, { Component, Fragment } from \"react\";\nimport Link from \"./Link\";\nimport { IQuery } from \"../interfaces\";\nimport { Query } from \"react-apollo\";\n\nimport {\n  FEED_QUERY,\n  NEW_LINKS_SUBSCRIPTION,\n  NEW_VOTES_SUBSCRIPTION,\n} from \"../query\";\nimport { LINKS_PER_PAGE } from \"../constants\";\n\ninterface ILinkList {\n  location: any;\n  history: any;\n  match: any;\n}\n\nclass LinkList extends Component<ILinkList> {\n  _updateCacheAfterVote = (store: any, createVote: any, linkId: string) => {\n    const isNewPage = this.props.location.pathname.includes(\"new\");\n    const page = parseInt(this.props.match.params.page, 10);\n\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n    const first = isNewPage ? LINKS_PER_PAGE : 100;\n    const orderBy = isNewPage ? { createdAt: \"desc\" } : null;\n    const data = store.readQuery({\n      query: FEED_QUERY,\n      variables: { first, skip, orderBy },\n    });\n    const votedLink = data.feed.links.find((link: any) => link.id === linkId);\n    votedLink.votes = createVote.link.votes;\n    store.writeQuery({ query: FEED_QUERY, data });\n  };\n\n  _subscribeToNewLinks = (subscribeToMore: any) => {\n    subscribeToMore({\n      document: NEW_LINKS_SUBSCRIPTION,\n      updateQuery: (prev: any, { subscriptionData }: any) => {\n        if (!subscriptionData.data) return prev;\n        const newLink = subscriptionData.data.newLink;\n        const exists = prev.feed.links.find(({ id }: any) => id === newLink.id);\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          feed: {\n            links: [newLink, ...prev.feed.links],\n            count: prev.feed.links.length + 1,\n            __typename: prev.feed.__typename,\n          },\n        });\n      },\n    });\n  };\n\n  _subscribeToNewVotes = (subscribeToMore: any) => {\n    subscribeToMore({\n      document: NEW_VOTES_SUBSCRIPTION,\n    });\n  };\n\n  _getQueryVariables = () => {\n    const isNewPage = this.props.location.pathname.includes(\"new\");\n    const page = parseInt(this.props.match.params.page, 10);\n\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n    const take = isNewPage ? LINKS_PER_PAGE : 100;\n    const orderBy = isNewPage ? { createdAt: \"desc\" } : null;\n    return { take, skip, orderBy };\n  };\n\n  _getLinksToRender = (data: any) => {\n    const isNewPage = this.props.location.pathname.includes(\"new\");\n    if (isNewPage) {\n      return data.feed.links;\n    }\n    const rankedLinks = data.feed.links.slice();\n    rankedLinks.sort((l1: any, l2: any) => l2.votes.length - l1.votes.length);\n    return rankedLinks;\n  };\n\n  _nextPage = (data: any) => {\n    const page = parseInt(this.props.match.params.page, 10);\n    if (page <= data.feed.count / LINKS_PER_PAGE) {\n      const nextPage = page + 1;\n      this.props.history.push(`/new/${nextPage}`);\n    }\n    console.log(this.props);\n  };\n\n  _previousPage = () => {\n    const page = parseInt(this.props.match.params.page, 10);\n    if (page > 1) {\n      const previousPage = page - 1;\n      this.props.history.push(`/new/${previousPage}`);\n    }\n  };\n\n  render() {\n    return (\n      <Query query={FEED_QUERY} variables={this._getQueryVariables()}>\n        {({ loading, error, data, subscribeToMore }: IQuery) => {\n          if (loading) return <div>Fetching</div>;\n          if (error) return <div>Error</div>;\n\n          this._subscribeToNewLinks(subscribeToMore);\n          this._subscribeToNewVotes(subscribeToMore);\n\n          const linksToRender = this._getLinksToRender(data);\n          const isNewPage = this.props.location.pathname.includes(\"new\");\n          const pageIndex = this.props.match.params.page\n            ? (this.props.match.params.page - 1) * LINKS_PER_PAGE\n            : 0;\n\n          return (\n            <Fragment>\n              {linksToRender.map((link: any, index: number) => (\n                <Link\n                  key={link.id}\n                  link={link}\n                  index={index + pageIndex}\n                  updateStoreAfterVote={this._updateCacheAfterVote}\n                />\n              ))}\n              {isNewPage && (\n                <div className=\"flex ml4 mv3 gray\">\n                  <div className=\"pointer mr2\" onClick={this._previousPage}>\n                    Previous |\n                  </div>\n                  <div className=\"pointer\" onClick={() => this._nextPage(data)}>\n                    Next\n                  </div>\n                </div>\n              )}\n            </Fragment>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default LinkList;\n","import React, { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Mutation } from \"react-apollo\";\nimport { POST_MUTATION, FEED_QUERY } from \"../query\";\nimport { LINKS_PER_PAGE } from \"../constants\";\n\nclass CreateLink extends Component<RouteComponentProps> {\n  state = {\n    description: \"\",\n    url: \"\",\n  };\n\n  _updateCacheAfterPost = (store: any, post: any) => {\n    const data = store.readQuery({ query: FEED_QUERY });\n    data.feed.links.unshift(post);\n    store.writeQuery({\n      query: FEED_QUERY,\n      data,\n    });\n  };\n\n  render() {\n    const { description, url } = this.state;\n    return (\n      <div>\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={description}\n            onChange={(e) => this.setState({ description: e.target.value })}\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={url}\n            onChange={(e) => this.setState({ url: e.target.value })}\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <Mutation\n          mutation={POST_MUTATION}\n          variables={{ description, url }}\n          onCompleted={() => this.props.history.push(\"/new/1\")}\n          update={(store: any, { data: { post } }: any) => {\n            const first = LINKS_PER_PAGE;\n            const skip = 0;\n            const orderBy = \"createdAt_DESC\";\n            const data = store.readQuery({\n              query: FEED_QUERY,\n              variables: { first, skip, orderBy },\n            });\n            data.feed.links.unshift(post);\n            store.writeQuery({\n              query: FEED_QUERY,\n              data,\n              variables: { first, skip, orderBy },\n            });\n          }}\n        >\n          {(postMutation: any) => (\n            <button onClick={postMutation}>Submit</button>\n          )}\n        </Mutation>\n      </div>\n    );\n  }\n}\n\nexport default CreateLink;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport { AUTH_TOKEN } from \"../constants\";\n\nclass Header extends Component<RouteComponentProps> {\n  render() {\n    const authToken = localStorage.getItem(AUTH_TOKEN);\n    return (\n      <div className=\"flex pa1 justify-between nowrap orange\">\n        <div className=\"flex flex-fixed black\">\n          <div className=\"fw7 mr1\">Hacker News</div>\n          <Link to=\"/\" className=\"ml1 no-underline black\">\n            new\n          </Link>\n          <div className=\"ml1\">|</div>\n          <Link to=\"/top\" className=\"ml1 no-underline black\">\n            top\n          </Link>\n          <div className=\"ml1\">|</div>\n          <Link to=\"/search\" className=\"ml1 no-underline black\">\n            search\n          </Link>\n          {authToken && (\n            <div className=\"flex\">\n              <div className=\"ml1\">|</div>\n              <Link to=\"/create\" className=\"ml1 no-underline black\">\n                submit\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-fixed\">\n          {authToken ? (\n            <div\n              className=\"ml1 pointer black\"\n              onClick={() => {\n                localStorage.removeItem(AUTH_TOKEN);\n                this.props.history.push(`/`);\n              }}\n            >\n              logout\n            </div>\n          ) : (\n            <Link to=\"/login\" className=\"ml1 no-underline black\">\n              login\n            </Link>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Header);\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { RouteComponentProps } from \"react-router\";\nimport { AUTH_TOKEN } from \"../constants\";\nimport { SIGNUP_MUTATION, LOGIN_MUTATION } from \"../query\";\n\nclass Login extends Component<RouteComponentProps> {\n  state = {\n    login: true, // switch between Login and SignUp\n    email: \"\",\n    password: \"\",\n    name: \"\",\n  };\n\n  render() {\n    const { login, email, password, name } = this.state;\n    return (\n      <div>\n        <h4 className=\"mv3\">{login ? \"Login\" : \"Sign Up\"}</h4>\n        <div className=\"flex flex-column\">\n          {!login && (\n            <input\n              value={name}\n              onChange={(e) => this.setState({ name: e.target.value })}\n              type=\"text\"\n              placeholder=\"Your name\"\n            />\n          )}\n          <input\n            value={email}\n            onChange={(e) => this.setState({ email: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your email address\"\n          />\n          <input\n            value={password}\n            onChange={(e) => this.setState({ password: e.target.value })}\n            type=\"password\"\n            placeholder=\"Choose a safe password\"\n          />\n        </div>\n        <div className=\"flex mt3\">\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, name }}\n            onCompleted={(data: any) => this._confirm(data)}\n          >\n            {(mutation: any) => (\n              <div className=\"pointer mr2 button\" onClick={mutation}>\n                {login ? \"login\" : \"create account\"}\n              </div>\n            )}\n          </Mutation>\n          <div\n            className=\"pointer button\"\n            onClick={() => this.setState({ login: !login })}\n          >\n            {login ? \"need to create an account?\" : \"already have an account?\"}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  _confirm = async (data: any) => {\n    const { token } = this.state.login ? data.login : data.signup;\n    this._saveUserData(token);\n    this.props.history.push(`/`);\n  };\n\n  _saveUserData = (token: string) => {\n    localStorage.setItem(AUTH_TOKEN, token);\n  };\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { withApollo } from \"react-apollo\";\nimport { FEED_SEARCH_QUERY } from \"../query\";\nimport Link from \"./Link\";\nimport { IClient } from \"../interfaces\";\n\nclass Search extends Component<IClient> {\n  state = {\n    links: [],\n    filter: \"\",\n  };\n\n  _executeSearch = async () => {\n    const { filter } = this.state;\n    const result = await this.props.client.query({\n      query: FEED_SEARCH_QUERY,\n      variables: { filter },\n    });\n    const links = result.data.feed.links;\n    this.setState({ links });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          Search\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ filter: e.target.value })}\n          />\n          <button onClick={() => this._executeSearch()}>OK</button>\n        </div>\n        {this.state.links.map((link: any, index: number) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default withApollo(Search);\n","import React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport LinkList from \"./LinkList\";\nimport CreateLink from \"./CreateLink\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport Search from \"./Search\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"center w85\">\n        <Header />\n        <div className=\"ph3 pv1 background-gray\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/new/1\" />} />\n            <Route exact path=\"/create\" component={CreateLink} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/search\" component={Search} />\n            <Route exact path=\"/top\" component={LinkList} />\n            <Route exact path=\"/new/:page\" component={LinkList} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setContext } from \"apollo-link-context\";\nimport { AUTH_TOKEN } from \"./constants\";\n\nconst HOST = window.location.hostname;\nconst PORT = process.env.PORT || 4000;\n\nconst httpLink = createHttpLink({\n  uri: `http://${HOST}:${PORT}`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://${HOST}:${PORT}`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    },\n  },\n});\n\ninterface Definintion {\n  kind: string;\n  operation?: string;\n}\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation }: Definintion = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}